from flask import Flask
import threading
import asyncio
import os
from datetime import datetime

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# T·∫°o Flask app gi·∫£ ƒë·ªÉ gi·ªØ cho Render kh√¥ng d·ª´ng web service
app_flask = Flask(__name__)

# L·ªánh /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Ch√†o m·ª´ng b·∫°n v·ªõi bot ƒë·∫∑t tr√†/cafe!\nG√µ /menu ƒë·ªÉ xem danh s√°ch ƒë·ªì u·ªëng."
    )

# L·ªánh /menu
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã MENU:\n"
        "1. cup   - Paper cup (1 case/10 pcs)\n"
        "2. vina  - Vinacafe (24 g√≥i/ b·ªãch)\n"
        "3. net   - Netcafe (18 g√≥i/ h·ªôp)\n"
        "4. leg   - Legend (12 g√≥i/ h·ªôp)\n"
        "5. g7    - G7 (21 g√≥i/ h·ªôp)\n"
        "6. bg7   - Black G7 (15 g√≥i/ h·ªôp)\n"
        "7. bviet - Black Cafe Vi·ªát (35 g√≥i/ b·ªãch)\n"
        "8. gin   - Ginger Tea\n"
        "9. lip   - Lipton ice tea\n"
        "10. blip  - Black lipton tea\n"
        "11. atis  - Atiso tea\n"
        "12. mat   - Matcha tea\n"
        "13. royal - Royal milk tea V√†ng\n"
        "14. milo  - Milo (10 g√≥i/ d√¢y)\n"
        "15. phin  - C√† ph√™ phin (500gr/ h·ªôp)"
    )

# Tin nh·∫Øn ƒë·ªãnh k·ª≥ m·ªói th√°ng
async def send_monthly_reminder(app):
    chat_id = os.environ.get("TARGET_CHAT_ID")
    await app.bot.send_message(
        chat_id=chat_id,
        text="üì£ Vui l√≤ng ch·ªçn tr√†/cafe th√°ng n√†y. Nh·∫≠p l·ªánh /menu ƒë·ªÉ xem chi ti·∫øt c√°c m√≥n."
    )

# Ch·∫°y bot trong lu·ªìng ri√™ng
def run_bot():
    TOKEN = os.environ.get("BOT_TOKEN")
    bot_app = ApplicationBuilder().token(TOKEN).build()

    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("menu", menu_command))

    scheduler = BackgroundScheduler(timezone="Asia/Ho_Chi_Minh")
    scheduler.add_job(send_monthly_reminder, 'cron', day=6, hour=8, minute=0, args=[bot_app])
    scheduler.start()

    # Fix l·ªói asyncio trong thread ph·ª•
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(bot_app.run_polling())

# Flask route m·∫∑c ƒë·ªãnh
@app_flask.route('/')
def index():
    return "Bot is running!"

if __name__ == '__main__':
    threading.Thread(target=run_bot).start()
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))