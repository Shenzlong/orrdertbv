from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pandas as pd
import io
import os

# Bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.environ.get("BOT_TOKEN")
TARGET_CHAT_ID = os.environ.get("TARGET_CHAT_ID")

# Danh s√°ch m√≥n
MENU_ITEMS = [
    ("cup", "Paper cup (1 case/10 pcs)"),
    ("vina", "Vinacafe (24 g√≥i/ b·ªãch)"),
    ("net", "Netcafe (18 g√≥i/ h·ªôp)"),
    ("leg", "Legend (12 g√≥i/ h·ªôp)"),
    ("g7", "G7 (21 g√≥i/ h·ªôp)"),
    ("bg7", "Black G7 (15 g√≥i/ h·ªôp)"),
    ("bviet", "Black Cafe Vi·ªát (35 g√≥i/ b·ªãch)"),
    ("gin", "Ginger Tea"),
    ("lip", "Lipton ice tea"),
    ("blip", "Black lipton tea"),
    ("atis", "Atiso tea"),
    ("mat", "Matcha tea"),
    ("royal", "Royal milk tea V√†ng"),
    ("milo", "Milo (10 g√≥i/ d√¢y)"),
    ("phin", "C√† ph√™ phin (500gr/ h·ªôp)"),
]

# L∆∞u l·ª±a ch·ªçn ng∆∞·ªùi d√πng: {user_id: (t√™n, m√£ m√≥n)}
user_choices = {}

# G·ª≠i tin nh·∫Øn khi g√µ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Ch√†o m·ª´ng b·∫°n v·ªõi bot ƒë·∫∑t tr√†/cafe!\nG√µ /menu ƒë·ªÉ xem danh s√°ch ƒë·ªì u·ªëng."
    )

# G·ª≠i menu khi g√µ /menu
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(text=f"{code} - {desc}", callback_data=code)]
        for code, desc in MENU_ITEMS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìã Ch·ªçn m√≥n b·∫°n mu·ªën ƒë·∫∑t:", reply_markup=reply_markup)

# X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m√≥n
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_code = query.data
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    user_choices[user_id] = (user_name, selected_code)

    await query.edit_message_text(text=f"‚úÖ {user_name} ƒë√£ ch·ªçn {selected_code}.")

# Hi·ªÉn th·ªã danh s√°ch ch·ªçn m√≥n khi g√µ /list
async def list_choices_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_choices:
        await update.message.reply_text("üì≠ Hi·ªán ch∆∞a c√≥ ai ch·ªçn m√≥n.")
        return

    response = "üìã Danh s√°ch ƒë·∫∑t m√≥n:\n"
    for _, (name, code) in user_choices.items():
        response += f"- {name}: {code}\n"

    await update.message.reply_text(response)

# Xo√° danh s√°ch khi g√µ /reset
async def reset_choices_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choices.clear()
    await update.message.reply_text("‚ôªÔ∏è Danh s√°ch ƒë·∫∑t m√≥n ƒë√£ ƒë∆∞·ª£c reset.")

# Xu·∫•t danh s√°ch ra Excel khi g√µ /export
async def export_choices_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_choices:
        await update.message.reply_text("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        return

    data = [{"T√™n": name, "M√£ m√≥n": code} for _, (name, code) in user_choices.items()]
    df = pd.DataFrame(data)

    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Danh s√°ch')

    excel_buffer.seek(0)

    await update.message.reply_document(
        document=excel_buffer,
        filename="danh_sach_chon_mon.xlsx",
        caption="üìÑ Danh s√°ch ch·ªçn m√≥n (Excel)"
    )

# G·ª≠i nh·∫Øc nh·ªü ƒë·ªãnh k·ª≥
async def send_monthly_reminder(app):
    await app.bot.send_message(
        chat_id=TARGET_CHAT_ID,
        text="üì£ Vui l√≤ng ch·ªçn tr√†/cafe th√°ng n√†y. Nh·∫≠p l·ªánh /menu ƒë·ªÉ xem chi ti·∫øt c√°c m√≥n."
    )

# Ch·∫°y bot
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CallbackQueryHandler(handle_menu_choice))
    app.add_handler(CommandHandler("list", list_choices_command))
    app.add_handler(CommandHandler("reset", reset_choices_command))
    app.add_handler(CommandHandler("export", export_choices_command))

    # Scheduler
    scheduler = BackgroundScheduler(timezone="Asia/Ho_Chi_Minh")
    scheduler.add_job(send_monthly_reminder, 'cron', day=6, hour=8, minute=0, args=[app])
    scheduler.start()

    print("Bot ƒëang ch·∫°y...")
    app.run_polling()
